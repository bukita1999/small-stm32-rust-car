[package]
# TODO(1) fix `authors` and `name` if you didn't use `cargo-generate`
authors = ["cao"]
name = "small-stm32-rust-car"

# Ferocene only supports up to 2021 edition
#edition = "2021"
# Many embedded developers don't use Ferocene, so they could benefit from the latest Rust features 
edition = "2024"
version = "0.1.0"


# To run all the tests via `cargo test` the tests need to be explicitly disabled for the binary targets
# If you use a standard main.rs file the following is sufficient:
# [[bin]]
# name = "{{project-name}}"
# test = false

[[bin]]
name = "bitfield"
path = "src/bin/bitfield.rs"
test = false

[[bin]]
name = "format"
path = "src/bin/format.rs"
test = false

[[bin]]
name = "hello"
path = "src/bin/hello.rs"
test = false

[[bin]]
name = "levels"
path = "src/bin/levels.rs"
test = false

[[bin]]
name = "overflow"
path = "src/bin/overflow.rs"
test = false

[[bin]]
name = "panic"
path = "src/bin/panic.rs"
test = false

[[bin]]
name = "mecanum_car"
path = "src/bin/mecanum_car.rs"
test = false

[lib]
harness = false

# needed for each integration test
[[test]]
name = "integration"
harness = false

[dependencies]
cortex-m = { version = "0.7", features = ["critical-section-single-core"] }
cortex-m-rt = "0.7"
defmt = "1.0"
defmt-rtt = "1.0"
panic-probe = { version = "1.0", features = ["print-defmt"] }
cortex-m-semihosting = "0.5.0"
# STM32F103 HAL for hardware abstraction
stm32f1xx-hal = { version = "0.10", features = ["stm32f103", "rt"] }

# RTIC for real-time concurrency
rtic = { version = "2.1", features = ["thumbv7-backend"] }
rtic-monotonics = { version = "2.0", features = ["cortex-m-systick"] }

# USB CDC ACM support
usb-device = "0.3"
usbd-serial = "0.2"

# I2C and PWM driver for PCA9685
embedded-hal = "1.0"
nb = "1.1"
pca9685 = "0.1"

# Ring buffer for USB communication
heapless = "0.8"

# Math utilities
libm = "0.2"
micromath = "2.1"

# nb dependency already defined above for I2C driver

[dev-dependencies]
defmt-test = "0.3"

# cargo build/run
[profile.dev]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = 'z'         # <-
overflow-checks = true  # <-

# cargo test
[profile.test]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = 3           # <-
overflow-checks = true  # <-

# cargo build/run --release
[profile.release]
codegen-units = 1
debug = 2
debug-assertions = false # <-
incremental = false
lto = 'fat'
opt-level = 3            # <-
overflow-checks = false  # <-

# cargo test --release
[profile.bench]
codegen-units = 1
debug = 2
debug-assertions = false # <-
incremental = false
lto = 'fat'
opt-level = 3            # <-
overflow-checks = false  # <-

